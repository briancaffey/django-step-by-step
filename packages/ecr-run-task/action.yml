name: 'Action for running an ECS task in a GHA workflow'
description: 'Action for running ECS task'
author: 'Brian Caffey'
inputs:
  BASE_ENV:
    required: true
    description: 'Base env name (e.g. dev)'
  APP_ENV:
    required: true
    description: 'App env name (e.g. alpha)'
  VERSION:
    required: true
    description: 'Application version git tag (e.g. v1.2.3)'
  ECR_REPO:
    required: true
    description: 'ECR repo to use'
  CONTAINER_NAME:
    required: true
    description: 'Name of the container to update'
  AWS_REGION:
    required: false
    description: 'AWS Region'
    default: 'us-east-1'

runs:
  using: "composite"
  steps:
    # Note: this assumes that your ECR repo lives in the same AWS account as your ECS cluster
    - name: Get current AWS Account
      id: get-aws-account
      shell: bash
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity | jq -r .Account)
        echo $AWS_ACCOUNT_ID
        echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV

    - name: Download existing task definition
      id: download-task-definition
      shell: bash
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ inputs.CONTAINER_NAME }} \
          | jq '.taskDefinition' > task-definition.json

    - name: Remove fields from task definition
      id: cleaned-task-def
      shell: bash
      run: |
        jq 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' task-definition.json > cleaned-task-definition.json


    - name: Render new task definition
      id: render-new-task-definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: cleaned-task-definition.json
        container-name: ${{ inputs.CONTAINER_NAME }}
        image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION}}.amazonaws.com/${{ inputs.ECR_REPO }}:${{ inputs.VERSION }}

    - name: Deploy new task definition
      id: deploy-new-task-definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        cluster: ${{ inputs.APP_ENV }}-cluster
        task-definition: ${{ steps.render-new-task-definition.outputs.task-definition }}

    - name: Run task
      id: run-task
      shell: bash
      env:
        TASK_DEFINITION_ARN: ${{ steps.deploy-new-task-definition.outputs.task-definition-arn }}
        BASE_ENV: ${{ inputs.BASE_ENV }}
      run: |
        SUBNETS=$( \
          aws ec2 describe-subnets \
            --filters "Name=tag:base-env,Values=$BASE_ENV" "Name=tag:Name,Values=*application*" \
            --query 'Subnets[*].SubnetId' \
            --output text \
        )

        # replace spaces with commas using tr
        SUBNET_IDS=$(echo $SUBNETS | tr ' ' ',')

        echo "Subnet IDs $SUBNET_IDS"

        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:base-env,Values=$BASE_ENV" --query 'Vpcs[*].VpcId' --output text)

        echo "VPC ID $VPC_ID"

        SECURITY_GROUPS=$(
          aws ec2 describe-security-groups \
            --group-names $BASE_ENV-app-sg \
            --filter Name=vpc-id,Values=${VPC_ID}
            --query 'SecurityGroups[*].GroupId' \
            --output text
        )

        echo "Security Groups $SECURITY_GROUPS"

        echo "Running backend_update commands..."

        # timestamp used for log retrieval (milliseconds after Jan 1, 1970 00:00:00 UTC)
        START_TIME=$(date +%s000)

        # run the migration task and capture the taskArn into a variable called TASK_ID
        TASK_ID=$( \
          aws ecs run-task \
            --cluster $BASE_ENV-cluster \
            --task-definition $TASK_DEFINITION_ARN \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUPS],assignPublicIp=ENABLED}" \
            | jq -r '.tasks[0].taskArn' \
          )

        echo "Task ID is $TASK_ID"

        aws ecs wait tasks-stopped \
          --tasks $TASK_ID \
          --cluster $BASE_ENV-cluster

        END_TIME=$(date +%s000)

        # print the CloudWatch log events to STDOUT
        aws logs get-log-events \
          --log-group-name "/ecs/$BASE_ENV/update" \
          --log-stream-name "update/update/${TASK_ID##*/}" \
          --start-time $START_TIME \
          --end-time $END_TIME \
          | jq -r '.events[].message'
