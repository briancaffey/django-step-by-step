# a github action that builds and deploys the project using docker commands and ssh
name: build, test, push and deploy to docker swarm

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy:
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    name: "Deploy to docker swarm"
    environment: docker-swarm-ec2
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.8]

    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Setup python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Git version info"
        id: git_version_info
        run: |
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}

      - name: "Get Instance Data"
        id: get_instance_data
        run: |

          # save instance json data to temp file
          aws ec2 describe-instances \
            --query 'Reservations[0].Instances[0]' \
            --filters "Name=tag:stack,Values=DockerEc2Stack" \
            --output json > /tmp/instance_data.json

          SWARM_LEADER_PUBLIC_IP=$(cat /tmp/instance_data.json | jq -r '.PublicIpAddress')
          KEY_PAIR_NAME=$(cat /tmp/instance_data.json | jq -r '.KeyName')

          echo ::set-output name=SWARM_LEADER_PUBLIC_IP::$SWARM_LEADER_PUBLIC_IP
          echo ::set-output name=KEY_PAIR_NAME::$KEY_PAIR_NAME

      # - name: "Install SSH Key"
      #   uses: shimataro/ssh-key-action@v2
      #   with:
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     name: id_rsa
      #     known_hosts: ${{ steps.get_instance_data.outputs.SWARM_LEADER_PUBLIC_IP }}

      - name: "Build Backend Docker Container"
        env:
          SOURCE_TAG: ${{ steps.git_version_info.outputs.SOURCE_TAG }}
          SWARM_HOST_IP: ${{ steps.get_instance_data.outputs.SWARM_LEADER_PUBLIC_IP }}

        run: |
          # get ECR repository by tag

          ## get ARN of ECR repository
          ECR_REPOSITORY_ARN=$(aws resourcegroupstaggingapi get-resources \
            --tag-filters Key=stack,Values=DockerEc2Stack \
            --resource-type-filters ecr:repository \
            --query 'ResourceTagMappingList[0].ResourceARN' \
            --output text
          )

          ## get ECR repository URI
          ECR_REPOSITORY_URI=$(aws ecr describe-repositories | jq -r --arg ECR_REPOSITORY_ARN "$ECR_REPOSITORY_ARN" -c '.repositories[] | select(.repositoryArn | contains($ECR_REPOSITORY_ARN)) | .repositoryUri')

          # do a docker login for ECR repository
          aws ecr get-login-password \
            --region us-east-1 \
            | docker login \
            --username AWS \
            --password-stdin $ECR_REPOSITORY_URI

          ls -al
          docker build -t $ECR_REPOSITORY_URI ./backend
          docker tag $ECR_REPOSITORY_URI $ECR_REPOSITORY_URI:$SOURCE_TAG

          docker push $ECR_REPOSITORY_URI:$SOURCE_TAG


          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H $SWARM_HOST_IP >> ~/.ssh/known_hosts

          # set the docker host to use ssh
          export DOCKER_HOST=ssh://ec2-user@$SWARM_HOST_IP

          docker ps

          # export BACKEND_IMAGE_URI and FRONTEND_IMAGE_URI, and domain name for docker stack deploy command

          # docker stack deploy --with-registry-auth -c stack.yml stack

      # - name: "Test Backend Docker Container"
      #   run: |
      #     docker run --rm -it ${{ secrets.DOCKER_IMAGE_NAME }}_latest /bin/bash

      # - name: "Push Backend Docker Container"
      #   run: |
      #     docker push ${{ secrets.DOCKER_IMAGE_NAME }}_latest

      # - name: "docker stack deploy"
      #   run: |
      #     docker stack deploy -c docker-compose.yml --prune --with-registry-auth ${{ secrets.DOCKER_STACK_NAME }}