# github action to create or update shared resources
name: "[CD] ad hoc | base | create / update"

on:
  workflow_dispatch:
    inputs:
      workspace:
        description: 'Terraform workspace for shared resources env'
        required: true
        default: 'dev'
        type: string

env:
  TF_DIR: iac/terraform/live/ad-hoc/base
  WORKSPACE: ${{ github.event.inputs.workspace }}
  TF_PLAN_FILE: tfplan-${{ github.event.inputs.workspace }}.bin
  TF_VAR_certificate_arn: ${{ secrets.ACM_CERTIFICATE_ARN }}
  TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
  TF_VAR_backend_name: ${{ secrets.BACKEND_NAME }}

jobs:
  terraform-init:
    name: "Initialize Terraform"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        run: |
          terraform -chdir=$TF_DIR init \
            -backend-config="bucket=${{ secrets.BACKEND_NAME }}-bucket" \
            -backend-config="dynamodb_table=${{ secrets.BACKEND_NAME }}-lock-table" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -backend-config="workspace_key_prefix=shared-resources"

          ls -al $TF_DIR

          # Create or select workspace
          terraform -chdir=$TF_DIR workspace select $WORKSPACE || \
            terraform -chdir=$TF_DIR workspace new $WORKSPACE

      - name: Upload Workspace Context
        uses: actions/upload-artifact@v4
        with:
          name: terraform-workspace
          path: $TF_DIR/.terraform
          if-no-files-found: error

  terraform-plan:
    name: "Generate Terraform Plan"
    needs: terraform-init
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
          terraform_wrapper: false

      - name: Download Workspace Context
        uses: actions/download-artifact@v4
        with:
          name: terraform-workspace
          path: $TF_DIR/.terraform

      - name: Terraform Plan
        run: |
          terraform -chdir=$TF_DIR workspace new $WORKSPACE || true
          terraform -chdir=$TF_DIR workspace select $WORKSPACE

          terraform -chdir=$TF_DIR plan \
            -var-file=envs/$TF_WORKSPACE.tfvars \
            -out=$TF_PLAN_FILE

          # Save plan file as artifact
          mkdir -p tf_artifacts
          mv $TF_DIR/$TF_PLAN_FILE tf_artifacts/

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tf_artifacts/$TF_PLAN_FILE

  terraform-apply:
    name: "Apply Terraform Changes"
    needs: terraform-plan
    # TODO: add environment for manual approvals
    # environment:
    #   name: production
    #   url: https://github.com/${{ github.repository }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
          terraform_wrapper: false

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: $TF_DIR

      - name: Terraform Apply
        run: |
          terraform -chdir=$TF_DIR workspace new $WORKSPACE || true
          terraform -chdir=$TF_DIR workspace select $WORKSPACE

          terraform -chdir=$TF_DIR apply $TF_PLAN_FILE
