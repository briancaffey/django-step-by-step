name: Backend / Unit Tests

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - dev

jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  lint-backend-code:
    # Name the Job
    name: Lint backend python code
    # Set the type of machine to run on
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # ports
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

      redis:
        image: redis
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: [3.9.13]

    steps:
      # Setup python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd backend && poetry install --no-interaction --no-root --with dev

      # lint python code using flake8
      - name: Code formatting check with Black
        run: |
          cd backend
          source $VENV
          pip freeze
          black . --exclude=".venv"

      # run pytest tests
      - name: Run pytest tests
        run: |
          cd backend
          source .venv/bin/activate
          python -V
          pytest .
