# github action to create or update an ad hoc environment
name: Create or update ad hoc environment

on:
  workflow_dispatch:
    inputs:

      # The Terraform workspace for the shared resources Terraform configuration
      # that the ad hoc environment will use.
      # This input typically will not be used since all ad hoc environments should use one set of shared resources
      # This may be changed if major changes to the shared resources configuration are made to avoid disrupting existing ad hoc environments
      shared_resources_workspace:
        description: 'Name of terraform workspace to use for shared resources'
        required: true
        default: 'dev'
        type: string

      workspace:
        description: 'Name of terraform workspace to use for the ad hoc environment'
        required: true
        default: 'dev'
        type: string

jobs:
  create_update_ad_hoc_env:
    name: "Create or update ad hoc environment"
    environment: ad-hoc-env-${{ github.event.inputs.workspace }}
    runs-on: ubuntu-latest

    steps:

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "terraform init, plan and apply for ad hoc environment"
        id: terraform_init_plan_apply
        env:

          # Terraform workspace (from the workflow input)
          WORKSPACE: ${{ github.event.inputs.workspace }}

          # backend config variables
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
          TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
          TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}

          # Terraform variables (TF_VAR_)
          # variables for accessing shared resources over terraform_remote_state
          TF_VAR_shared_resources_workspace: ${{ github.event.inputs.shared_resources_workspace }}
          TF_VAR_s3_bucket: ${{ secrets.S3_BUCKET }}

          # ECR variables
          TF_VAR_ecr_be_repo_url: ${{ secrets.BACKEND_IMAGE_URI }}
          TF_VAR_ecr_fe_repo_url: ${{ secrets.FRONTEND_IMAGE_URI }}

          # ACM variables
          TF_VAR_acm_certificate_arn: ${{ secrets.ACM_CERTIFICATE_ARN }}

          # Route 53 variables
          TF_VAR_frontend_url: ${{ secrets.FRONTEND_URL }}
          TF_VAR_zone_name: ${{ secrets.ZONE_NAME }}
          TF_VAR_record_name: ${{ secrets.RECORD_NAME }}

        run: |
          # set the terraform workspace
          export TF_WORKSPACE=$WORKSPACE
          terraform workspace select $TF_WORKSPACE || terraform workspace new $TF_WORKSPACE

          # set the relative path of the .tfvars file corresponding to the workspace
          export VAR_FILE=envs/${TF_WORKSPACE}.tfvars

          # init
          terraform -chdir=terraform/live/ad-hoc \
            init \
            -input=false \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${TF_BACKEND_KEY}" \
            -backend-config="region=${TF_BACKEND_REGION}"

          # plan
          terraform -chdir=terraform/live/ad-hoc \
            plan \
            -no-color \
            -var-file=$VAR_FILE

          # apply
          terraform -chdir=terraform/live/ad-hoc \
            apply \
            -auto-approve \
            -var-file=$VAR_FILE
