# github action to create or update an ad hoc environment
name: ad hoc | app | create / update

on:
  workflow_dispatch:
    inputs:

      # The Terraform workspace for the shared resources Terraform configuration
      # that the ad hoc environment will use.
      # This input typically will not be used since all ad hoc environments should use one set of shared resources
      # This may be changed if major changes to the shared resources configuration are made to avoid disrupting existing ad hoc environments
      shared_resources_workspace:
        description: 'Terraform workspace for shared resources env'
        required: true
        default: 'dev'
        type: string

      workspace:
        description: 'Terraform workspace for the ad hoc env'
        required: true
        default: 'dev'
        type: string

jobs:
  create_update_ad_hoc_env:
    name: "Create or update ad hoc env [${{ github.event.inputs.workspace }}]"
    environment: ad-hoc-env-${{ github.event.inputs.workspace }}
    runs-on: ubuntu-latest

    steps:
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # get the values for the Terraform configuration for the shared resources: BASTION_IP, RDS_ENDPOINT, etc.
      - name: "Get AWS Resource values"
        id: get_aws_resource_values
        env:
          SHARED_RESOURCES_ENV: ${{ github.event.inputs.shared_resources_workspace }}
        run: |
          BASTION_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:env,Values=$SHARED_RESOURCES_ENV" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)

          RDS_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier $SHARED_RESOURCES_ENV-rds \
            --query "DBInstances[0].Endpoint.Address" \
            --output text)

          echo ::set-output name=BASTION_PUBLIC_IP::$BASTION_PUBLIC_IP
          echo ::set-output name=RDS_ENDPOINT::$RDS_ENDPOINT

      # needed in order to access the bastion host when creating ad hoc DB in RDS
      # TODO: is there a GitHub action for doing this?
      - name: "Setup SSH Key"
        id: setup_ssh_key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: "Create ad hoc environment DB"
        id: create_ad_hoc_env_db
        env:
          BASTION_PUBLIC_IP: ${{ steps.get_aws_resource_values.outputs.BASTION_PUBLIC_IP }}
          RDS_ENDPOINT: ${{ steps.get_aws_resource_values.outputs.RDS_ENDPOINT }}
          AD_HOC_ENV: ${{ github.event.inputs.workspace }}
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@$BASTION_PUBLIC_IP \
            "PGPASSWORD=postgres createdb -U postgres -w -h $RDS_ENDPOINT $AD_HOC_ENV-db || echo DB either already exists or could not be created"

      - name: "terraform init, plan and apply for ad hoc environment"
        id: terraform_init_plan_apply
        env:
          # Terraform workspace (from the workflow input)
          WORKSPACE: ${{ github.event.inputs.workspace }}

          # backend config variables
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
          TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
          TF_BACKEND_DYNAMODB_TABLE: ${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}

          # Terraform variables (TF_VAR_)
          # variables for accessing shared resources over terraform_remote_state
          TF_VAR_shared_resources_workspace: ${{ github.event.inputs.shared_resources_workspace }}
          TF_VAR_s3_bucket: ${{ secrets.TF_BACKEND_BUCKET }}

          # ECR variables
          TF_VAR_ecr_be_repo_url: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend
          TF_VAR_ecr_fe_repo_url: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend

          # Route 53 variables
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}

        run: |

          # set the relative path of the .tfvars file corresponding to the workspace
          export VAR_FILE=envs/${WORKSPACE}.tfvars

          # init
          terraform -chdir=terraform/live/ad-hoc/app \
            init \
            -input=false \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DYNAMODB_TABLE}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${TF_BACKEND_REGION}" \
            -backend-config="workspace_key_prefix=ad-hoc-envs"

          # create the workspace if it doesn't exist already
          terraform workspace new ${WORKSPACE} || echo "Workspace ${WORKSPACE} already exists or cannot be created"

          # set the TF_WORKSPACE environment variable
          export TF_WORKSPACE=$WORKSPACE

          # plan
          terraform -chdir=terraform/live/ad-hoc/app \
            plan \
            -no-color \
            -var-file=$VAR_FILE

          # apply
          terraform -chdir=terraform/live/ad-hoc/app \
            apply \
            -auto-approve \
            -var-file=$VAR_FILE

          # output
          terraform -chdir=terraform/live/ad-hoc/app \
            output \
            -json > terraform_outputs.json

      # Migration and collectstatic commands
      - name: "Run post-deployment steps"
        id: post_ad_hoc_env_create_update
        env:
          AD_HOC_ENV: ${{ github.event.inputs.workspace }}
        run: |

          # get the migrate command from Terraform outputs and write to file
          cat terraform_outputs.json | jq -r '.backend_update_command.value' > backend_update_command.sh

          # view migrate command
          cat backend_update_command.sh

          # make the file executable
          sudo chmod +x backend_update_command.sh

          # run migrate command
          ./backend_update_command.sh
