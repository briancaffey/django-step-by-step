# github action to create or update prod app env
name: prod | app | create / update

on:
  workflow_dispatch:
    inputs:
      workspace:
        description: 'Terraform workspace for prod app env'
        required: true
        default: 'stage'
        type: string

      prod_base_env:
        description: 'Prod base env'
        required: true
        default: 'stage'
        type: string

jobs:
  create_update_prod_app_env:
    name: "Create or update prod app env [${{ github.event.inputs.workspace }}]"
    environment: prod-app-${{ github.event.inputs.workspace }}
    runs-on: ubuntu-latest

    steps:

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "terraform init, plan and apply for prod app env"
        id: terraform_init_plan_apply_prod_app
        env:

          # backend config
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
          TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
          TF_BACKEND_DYNAMODB_TABLE: ${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}

          WORKSPACE: ${{ github.event.inputs.workspace }}

          # for terraform_remote_state
          TF_VAR_prod_base_env: ${{ github.event.inputs.prod_base_env }}
          TF_VAR_s3_bucket: ${{ secrets.TF_BACKEND_BUCKET }}

          # ECR variables
          TF_VAR_ecr_be_repo_url: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend
          TF_VAR_ecr_fe_repo_url: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend

          # Route 53 variables
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}

        run: |
          export VAR_FILE=envs/${WORKSPACE}.tfvars

          terraform -chdir=terraform/live/prod/app \
            init \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DYNAMODB_TABLE}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${TF_BACKEND_REGION}" \
            -backend-config="workspace_key_prefix=prod/app"

          # create the workspace if it doesn't exist already
          terraform workspace new ${WORKSPACE} || echo "Workspace ${WORKSPACE} already exists or cannot be created"

          # set the TF_WORKSPACE environment variable
          export TF_WORKSPACE=$WORKSPACE

          terraform -chdir=terraform/live/prod/app \
            plan \
            -no-color \
            -var-file=$VAR_FILE

          terraform -chdir=terraform/live/prod/app \
            apply \
            -auto-approve \
            -var-file=$VAR_FILE

          terraform -chdir=terraform/live/prod/app output -json > terraform_outputs.json

      # backend_update_command
      - name: "Run post-deployment backend_update_command"
        id: post_prod_app_create_update
        run: |

          # get the backend_update_command command from Terraform outputs and write to file
          cat terraform_outputs.json | jq -r '.backend_update_command.value' > backend_update_command.sh

          # view migrate command
          cat backend_update_command.sh

          # make the file executable
          sudo chmod +x backend_update_command.sh

          # run migrate command
          ./backend_update_command.sh
