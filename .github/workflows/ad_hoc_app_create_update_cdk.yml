# github action to create or update shared resources
name: ad hoc | app | create / update [CDK]

on:
  workflow_dispatch:
    inputs:
      ad_hoc_base_name:
        description: 'Name for existing ad hoc base environment to use for the app environment using CDK'
        required: true
        default: 'dev'
        type: string

      ad_hoc_app_name:
        description: 'Name for ad hoc app environment create using CDK'
        required: true
        default: 'alpha'
        type: string

jobs:
  create_update_ad_hoc_app:
    name: "Create or update ad hoc app infrastructure using CDK [${{ github.event.inputs.ad_hoc_app_name }} on ${{ github.event.inputs.ad_hoc_base_name }}]"
    environment: ad-hoc-app-${{ github.event.inputs.ad_hoc_app_name }}
    env:
      AD_HOC_BASE_NAME: ${{ github.event.inputs.ad_hoc_base_name }}
      AD_HOC_APP_NAME: ${{ github.event.inputs.ad_hoc_app_name }}
      ACM_CERTIFICATE_ARN: ${{ secrets.ACM_CERTIFICATE_ARN }}
      DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
    runs-on: ubuntu-latest

    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: actions/checkout@v3

      # get the ids for the RDS instance and Bastion Host so we can create
      # a database for an ad hoc environment
      - name: "Get AWS Resource values"
        id: get_aws_resource_values
        env:
          AD_HOC_BASE_NAME: ${{ github.event.inputs.ad_hoc_base_name }}
        run: |
          BASTION_INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:env,Values=$AD_HOC_BASE_NAME" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)

          RDS_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier $AD_HOC_BASE_NAME-rds \
            --query "DBInstances[0].Endpoint.Address" \
            --output text)

          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_ENV
          echo "bastion_instance_id=$BASTION_INSTANCE_ID" >> $GITHUB_ENV

      - name: "Create ad hoc environment DB"
        id: create_ad_hoc_env_db
        env:
          RDS_ENDPOINT: ${{ env.rds_endpoint }}
          BASTION_INSTANCE_ID: ${{ env.bastion_instance_id }}
          AD_HOC_ENV: ${{ github.event.inputs.ad_hoc_base_name }}
          AWS_PAGER: ""
        run: |
          # TODO - move the hard-coded password to secrets manager and retrieve it from AWS Secrets Manager
          # define the command to create the database
          # get secret ARN from tagging api
          SECRET_ARN=$(aws resourcegroupstaggingapi get-resources \
            --tag-filters Key=stack,Values=ad-hoc-base-${AD_HOC_ENV} \
            --resource-type-filters secretsmanager:secret \
            | jq .ResourceTagMappingList[0].ResourceARN \
          )

          # get secret value
          export PGPASSWORD=$(aws secretsmanager get-secret-value --secret-id $SECRET_ARN | jq .SecretString | jq fromjson | jq .password)
          export COMMAND="PGPASSWORD=$PGPASSWORD createdb -U postgres -w -h $RDS_ENDPOINT $AD_HOC_ENV-db || echo DB either already exists or could not be created"

          # send the command and capture the output to get the command ID
          SEND_COMMAND_OUTPUT=$( \
            aws ssm send-command \
              --instance-ids "${BASTION_INSTANCE_ID}" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": ["'"${COMMAND}"'"]}' \
          )

          # get the command ID
          COMMAND_ID=$(echo $SEND_COMMAND_OUTPUT | jq -r '.Command.CommandId')

          # wait for the command to complete
          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id ${BASTION_INSTANCE_ID}

          echo "Command Completed.."

          # get command output from StdOut and StdErr content
          COMMAND_INFO=$( \
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id "${BASTION_INSTANCE_ID}" \
          )

          echo $COMMAND_INFO

          # get the command output
          echo $COMMAND_INFO | jq -r '.StandardOutputContent'
          echo $COMMAND_INFO | jq -r '.StandardErrorContent'


      - uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install CDK
        run: |
          cd iac/cdk/ && npm install && npm i -g aws-cdk

      - name: "cdk synth for AdHocAppStack"
        id: cdk_synth
        run: |
          cd iac/cdk/ && cdk synth AdHocAppStack

      # - name: "cdk deploy"
      #   id: cdk_deploy
      #   run: |
      #     cd iac/cdk/ && cdk deploy AdHocAppStack --require-approval never
