# github action to destroy prod app env
name: prod | app | destroy [Terraform]

on:
  workflow_dispatch:
    inputs:
      workspace:
        description: 'Terraform workspace for prod app env'
        required: true
        default: 'stage'
        type: string

      prod_base_env:
        description: 'Prod base env'
        required: true
        default: 'stage'
        type: string

defaults:
  run:
    working-directory: iac/terraform/live/prod/app

jobs:
  prod_app_destroy_init_plan:
    name: "Terraform init and plan for destroying prod app [${{ github.event.inputs.workspace }}]"
    environment: prod
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.6
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: "terraform init and destroy for prod app env"
        id: terraform_init_plan_prod_app
        env:
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
          TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
          TF_BACKEND_DYNAMODB_TABLE: ${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}
          WORKSPACE: ${{ github.event.inputs.workspace }}
        run: |
          terraform \
            init \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DYNAMODB_TABLE}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${TF_BACKEND_REGION}" \
            -backend-config="workspace_key_prefix=prod/app"

      - name: "terraform plan"
        id: terraform_plan
        env:
          WORKSPACE: ${{ github.event.inputs.workspace }}
          TF_VAR_prod_base_env: ${{ github.event.inputs.prod_base_env }}
          TF_VAR_s3_bucket: ${{ secrets.TF_BACKEND_BUCKET }}
        run: |
          terraform workspace new ${WORKSPACE} || echo "Workspace ${WORKSPACE} already exists or cannot be created"
          export TF_WORKSPACE=$WORKSPACE

          terraform \
            plan \
            -destroy \
            -input=false \
            -no-color \
            -var-file=envs/$WORKSPACE.tfvars \
            -out=tfplan

      # https://github.com/actions/upload-artifact/issues?q=is%3Aissue+is%3Aopen+working-directory
      - name: Upload Terraform artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: "iac/terraform/live/prod/app/"

  prod_app_destroy_apply:
    name: "Destroy prod app env [${{ github.event.inputs.workspace }}]"
    environment: prod
    runs-on: ubuntu-latest
    needs: prod_app_destroy_init_plan

    steps:

      - uses: actions/checkout@v3

      # https://github.com/actions/upload-artifact/issues?q=is%3Aissue+is%3Aopen+working-directory
      - uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: "iac/terraform/live/prod/app"

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.6
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: "terraform apply destroy prod app"
        id: terraform_apply_destroy_prod_app
        env:
          WORKSPACE: ${{ github.event.inputs.workspace }}

        run: |

          # https://github.com/hashicorp/terraform/issues/24010#issuecomment-592936990
          chmod -R a+x ./.terraform/*

          terraform workspace new ${WORKSPACE} || echo "Workspace ${WORKSPACE} already exists or cannot be created"
          export TF_WORKSPACE=$WORKSPACE

          terraform apply -auto-approve "tfplan"
