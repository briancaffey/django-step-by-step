# github action to create or update shared resources
name: ad hoc | base | create / update

on:
  workflow_dispatch:
    inputs:
      workspace:
        description: 'Terraform workspace for shared resources env'
        required: true
        default: 'dev'
        type: string

jobs:
  create_update_shared_resources:
    name: "Create or update shared resources [${{ github.event.inputs.workspace }}]"
    environment: shared-resources-${{ github.event.inputs.workspace }}
    runs-on: ubuntu-latest

    steps:

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.6
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: actions/checkout@v3

      - name: "terraform init, plan and apply for shared resources"
        id: terraform_init_plan_apply_shared_resources
        env:
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
          TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
          TF_BACKEND_DYNAMODB_TABLE: ${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}
          WORKSPACE: ${{ github.event.inputs.workspace }}

          # Terraform variables
          TF_VAR_certificate_arn: ${{ secrets.ACM_CERTIFICATE_ARN }}
          TF_VAR_key_name: ${{ secrets.KEY_NAME }}

        run: |
          export VAR_FILE=envs/${WORKSPACE}.tfvars

          terraform -chdir=iac/terraform/live/ad-hoc/base \
            init \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DYNAMODB_TABLE}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${TF_BACKEND_REGION}" \
            -backend-config="workspace_key_prefix=shared-resources"

          # create the workspace if it doesn't exist already
          terraform workspace new ${WORKSPACE} || echo "Workspace ${WORKSPACE} already exists or cannot be created"

          # set the TF_WORKSPACE environment variable
          export TF_WORKSPACE=$WORKSPACE

          terraform -chdir=iac/terraform/live/ad-hoc/base \
            plan \
            -no-color \
            -var-file=$VAR_FILE

          terraform -chdir=iac/terraform/live/ad-hoc/base \
            apply \
            -auto-approve \
            -var-file=$VAR_FILE

          terraform -chdir=iac/terraform/live/ad-hoc/base output -json
