# github action to create or update an ad hoc environment
name: ad hoc | app | create / update [Pulumi]

on:
  workflow_dispatch:
    inputs:

      ad_hoc_base_name:
        description: 'Name for the ad hoc base env to use'
        required: true
        default: 'dev'
        type: string

      ad_hoc_app_name:
        description: 'Name for the ad hoc app env'
        required: true
        default: 'alpha'
        type: string

jobs:
  create_update_ad_hoc_env:
    name: "Create or update ad hoc env [${{ github.event.inputs.ad_hoc_app_name }}]"
    environment: ad-hoc-app
    runs-on: ubuntu-latest

    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "16"

      - run: npm install
        working-directory: iac/pulumi/live/ad-hoc/app

      # get the values for the Terraform configuration for the shared resources: BASTION_IP, RDS_ENDPOINT, etc.
      - name: "Get AWS Resource values"
        id: get_aws_resource_values
        env:
          AD_HOC_BASE_NAME: ${{ github.event.inputs.ad_hoc_base_name }}
        run: |
          BASTION_INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:env,Values=$AD_HOC_BASE_NAME" \
            --filters "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)

          RDS_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier $AD_HOC_BASE_NAME-rds \
            --query "DBInstances[0].Endpoint.Address" \
            --output text)

          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_ENV
          echo "bastion_instance_id=$BASTION_INSTANCE_ID" >> $GITHUB_ENV

      - name: "Create ad hoc app environment DB"
        id: create_ad_hoc_env_db
        env:
          RDS_ENDPOINT: ${{ env.rds_endpoint }}
          BASTION_INSTANCE_ID: ${{ env.bastion_instance_id }}
          AD_HOC_APP_NAME: ${{ github.event.inputs.ad_hoc_app_name }}
          AWS_PAGER: ""
        run: |
          # TODO - move the hard-coded password to secrets manager and retrieve it from AWS Secrets Manager
          # define the command to create the database
          export COMMAND="PGPASSWORD=postgres createdb -U postgres -w -h $RDS_ENDPOINT $AD_HOC_APP_NAME-db || echo DB either already exists or could not be created"

          # send the command and capture the output to get the command ID
          SEND_COMMAND_OUTPUT=$( \
            aws ssm send-command \
              --instance-ids "${BASTION_INSTANCE_ID}" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands": ["'"${COMMAND}"'"]}' \
          )

          # get the command ID
          COMMAND_ID=$(echo $SEND_COMMAND_OUTPUT | jq -r '.Command.CommandId')

          # wait for the command to complete
          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id ${BASTION_INSTANCE_ID}

          echo "Command Completed.."

          # get command output for StdOut and StdErr content
          COMMAND_INFO=$( \
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id "${BASTION_INSTANCE_ID}" \
          )

          echo $COMMAND_INFO

          # get the command output
          echo $COMMAND_INFO | jq -r '.StandardOutputContent'
          echo $COMMAND_INFO | jq -r '.StandardErrorContent'

      - name: Preview Pulumi base ad app environment
        uses: pulumi/actions@v3
        with:
          command: preview
          stack-name: briancaffey/adhoc-app/alpha
          github-token: ${{ secrets.GITHUB_TOKEN }}
          work-dir: iac/pulumi/live/ad-hoc/app
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Pulumi up for ad hoc app environment
        uses: pulumi/actions@v3
        with:
          command: up
          stack-name: briancaffey/adhoc-app/alpha
          github-token: ${{ secrets.GITHUB_TOKEN }}
          work-dir: iac/pulumi/live/ad-hoc/app
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}


      # Migration and collectstatic commands
      - name: "Run post-deployment steps"
        id: post_ad_hoc_env_create_update
        run: |

          pulumi -C iac/pulumi/live/ad-hoc/app stack output -j | jq -r .backendUpdateScript > backend_update_command.sh

          # view migrate command
          cat backend_update_command.sh

          # make the file executable
          sudo chmod +x backend_update_command.sh

          # run migrate command
          ./backend_update_command.sh
