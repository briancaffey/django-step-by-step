# github action to destroy an ad hoc environment
name: ad hoc | app | destroy

on:
  workflow_dispatch:
    inputs:

      shared_resources_workspace:
        description: 'Terraform workspace for shared resources env'
        required: true
        default: 'dev'
        type: string

      workspace:
        description: 'Terraform workspace for ad hoc env to destroy'
        required: true
        default: 'dev'
        type: string

jobs:
  destroy_ad_hoc_env:
    name: "Destroy ad hoc env [${{ github.event.inputs.workspace }}]"
    environment: ad-hoc-env-${{ github.event.inputs.workspace }}
    runs-on: ubuntu-latest

    steps:

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.6
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: actions/checkout@v3

      - name: "terraform destroy"
        id: terraform_destroy
        env:
          # Terraform workspace (from the workflow input)
          WORKSPACE: ${{ github.event.inputs.workspace }}

          # backend config variables
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
          TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
          TF_BACKEND_DYNAMODB_TABLE: ${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}

          # Terraform variables (TF_VAR_)
          # variables for accessing shared resources over terraform_remote_state
          TF_VAR_shared_resources_workspace: ${{ github.event.inputs.shared_resources_workspace }}
          TF_VAR_s3_bucket: ${{ secrets.TF_BACKEND_BUCKET }}

          # ECR variables
          TF_VAR_ecr_be_repo_url: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend
          TF_VAR_ecr_fe_repo_url: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend

          # ACM variables
          TF_VAR_acm_certificate_arn: ${{ secrets.ACM_CERTIFICATE_ARN }}

          # Route 53 variables
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}

        run: |

          export VAR_FILE=envs/${WORKSPACE}.tfvars

          terraform -chdir=iac/terraform/live/ad-hoc/app \
            init \
            -input=false \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DYNAMODB_TABLE}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${TF_BACKEND_REGION}" \
            -backend-config="workspace_key_prefix=ad-hoc-envs"

          # create the workspace if it doesn't exist already
          terraform workspace new ${WORKSPACE} || echo "Workspace ${WORKSPACE} already exists or cannot be created"

          # set the terraform workspace
          export TF_WORKSPACE=$WORKSPACE

          # destroy
          terraform -chdir=iac/terraform/live/ad-hoc/app \
            destroy \
            -var-file=${VAR_FILE} \
            -auto-approve

          # switch to the default workspace
          unset TF_WORKSPACE
          terraform workspace select default

          # delete the workspace
          terraform workspace delete ${WORKSPACE}

          echo "Terraform workspace ${WORKSPACE} has been deleted."
