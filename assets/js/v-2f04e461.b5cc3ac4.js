"use strict";(self.webpackChunkvuepress_docs=self.webpackChunkvuepress_docs||[]).push([[296],{5235:(e,o,a)=>{a.r(o),a.d(o,{data:()=>t});const t={key:"v-2f04e461",path:"/deploy/aws/",title:"Overview of options for deploying μblog",lang:"en-US",frontmatter:{next:"/deploy/aws/cdk",prev:"/guide/ci-cd/github-actions",head:[["meta",{name:"description",content:"Using different Infrastructure as Code tools for deploying Django projects"}]]},excerpt:"",headers:[{level:2,title:"Infrastructure as Code Libraries",slug:"infrastructure-as-code-libraries",children:[]},{level:2,title:"Consuming IaC libraries",slug:"consuming-iac-libraries",children:[]},{level:2,title:"Infrastructure pipeline workflow filename convention",slug:"infrastructure-pipeline-workflow-filename-convention",children:[]},{level:2,title:"app stack",slug:"app-stack",children:[]},{level:2,title:"[CD] App Update",slug:"cd-app-update",children:[]}],filePathRelative:"deploy/aws/README.md",git:{updatedTime:1745500356e3,contributors:[]}}},8459:(e,o,a)=>{a.r(o),a.d(o,{default:()=>m});var t=a(6252);const n=(0,t.Wm)("h1",{id:"overview-of-options-for-deploying-μblog",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#overview-of-options-for-deploying-μblog","aria-hidden":"true"},"#"),(0,t.Uk)(" Overview of options for deploying μblog")],-1),i=(0,t.Wm)("p",null,"This project primarily focuses on deploying to AWS using ECS Fargate. GitHub Actions are used for deployment pipelines.",-1),r=(0,t.Wm)("h2",{id:"infrastructure-as-code-libraries",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#infrastructure-as-code-libraries","aria-hidden":"true"},"#"),(0,t.Uk)(" Infrastructure as Code Libraries")],-1),s=(0,t.Wm)("p",null,"There are three options for Infrastructure as Code:",-1),c={href:"https://github.com/briancaffey/terraform-aws-django",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Wm)("code",null,"terraform-aws-django",-1),l={href:"https://github.com/briancaffey/pulumi-aws-django",target:"_blank",rel:"noopener noreferrer"},p=(0,t.Wm)("code",null,"pulumi-aws-django",-1),u={href:"https://github.com/briancaffey/cdk-django",target:"_blank",rel:"noopener noreferrer"},h=(0,t.Wm)("code",null,"cdk-django",-1),f=(0,t.uE)('<h2 id="consuming-iac-libraries" tabindex="-1"><a class="header-anchor" href="#consuming-iac-libraries" aria-hidden="true">#</a> Consuming IaC libraries</h2><p>The <code>django-step-by-step</code> repo includes a directory called <code>iac</code> with the following structure:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>iac\n├── cdk\n├── pulumi\n└── terraform\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Each of these directories includes code that uses the IaC libraries referenced above. These directories include the &quot;live&quot; configuration files (<code>{env}.json</code>, <code>{env}.tfvars</code>, <code>Pulumi.{env}.yaml</code>) that map to environments in AWS.</p><h2 id="infrastructure-pipeline-workflow-filename-convention" tabindex="-1"><a class="header-anchor" href="#infrastructure-pipeline-workflow-filename-convention" aria-hidden="true">#</a> Infrastructure pipeline workflow filename convention</h2><p>Each of these options has corresponding GitHub Actions workflow files.</p><p>These workflow files can be found in the <code>.github/workflows</code> folder of <code>django-step-by-step</code> under the following names:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>iac_cdk_actions.yml\niac_pulumi_actions.yml\niac_terraform_actions.yml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>These three GitHub Actions all work in the same way:</p><ul><li>they can be used for deploying either the <code>base</code> or <code>app</code> infrastructure stack</li><li>they can accept a name for the <code>base</code> and <code>app</code> stack that must correspond to the &quot;live&quot; configuration files mentioned above</li><li>they can be used to destroy resources for a stack by selecting a <code>destroy</code> option</li><li>the plan/preview/diff is added to the summary of each workflow</li></ul><p>These workflows can be easily copied or adapted for different needs. For example, if you would like to manually approve the deployment of infrastructure resources after viewing the plan/preview/diff, then you can using GitHub environments for the deploy steps.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Understanding the difference between infrastructure and application CI/CD pipelines is very important! The following sections go into detail about the <code>app</code> infrastructure pipeline and the <code>App Update</code> pipeline and things to consider when using these pipelines.</p></div><h2 id="app-stack" tabindex="-1"><a class="header-anchor" href="#app-stack" aria-hidden="true">#</a> <code>app</code> stack</h2><p>When the <code>app</code> stack is deployed, it sets up the ECS cluster, ECS task definitions and ECS services for an <code>app</code> environment. Each task definition uses the <code>latest</code> tag for the container image (for the backend and frontend services) and uses a <code>desiredCount</code> of <code>0</code> for each service.</p><p>For each of the IaC libraries, the ECS service uses <code>ignore_changes</code> for the <code>task_definition</code> and <code>desired_count</code>, this means that deploying a change to the <code>app</code> stack (such as adding a new environment variable to the backend task definitions) will not change anything in the running application. Instead, it publishes a new task definition. This new task definition will be used as the basis for the new task definition created by the <code>[CD] App Update</code> workflow.</p><p>After you deploy the <code>app</code> stack, you need to run the <code>[CD] App Update</code> GitHub Action. This will use the most recent version of each task definition and updated the <code>image</code> tag to the version specified in the Action&#39;s inputs (e.g. <code>v1.2.3</code>). Also the desired count for each service will be set to <code>1</code> which will start each service. You may want to use different values for the <code>desiredCount</code> when deploying your own application.</p><h2 id="cd-app-update" tabindex="-1"><a class="header-anchor" href="#cd-app-update" aria-hidden="true">#</a> <code>[CD] App Update</code></h2><p>To make regular application updates, you can use the <code>[CD] App Update</code> GitHub Action. This Action will first run the <code>pre-backend-update</code> job. This job is set up to run migrations, collectstatic and anything else that must be done prior to updating the server code (<code>gunicorn</code>, <code>celery</code>, <code>celery-beat</code> services).</p><p>The <code>pre-backend-update</code> step will also attempt to create a database using the name of the <code>app</code> environment. For example, if you select the <code>app</code> name <code>alpha</code>, this step will attempt to create an <code>alpha-db</code> database if it does not already exist. This allows for using a shared RDS instance with multiple postgres databases for each <code>app</code> environment.</p><p>After creating the database, the <code>pre-backend-update</code> job runs database migrations using Django&#39;s <code>migrate</code> command.</p><p>The <code>[CD] App Update</code> Action then does a rolling update for each of the backend application services (<code>gunicorn</code>, <code>default</code> celery worker and celery <code>beat</code>).</p><p>These actions use the official AWS GitHub Action called <code>aws-actions/amazon-ecs-deploy-task-definition</code> for updating task definitions, updating services and running one-off tasks (like the <code>pre-backend-update</code>).</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>For the most up-to-date information on these projects, please see their open-issues and recent CHANGELOG entries.</p></div>',23),m={render:function(e,o){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[n,i,r,s,(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("a",c,[d,(0,t.Wm)(a)])]),(0,t.Wm)("li",null,[(0,t.Wm)("a",l,[p,(0,t.Wm)(a)])]),(0,t.Wm)("li",null,[(0,t.Wm)("a",u,[h,(0,t.Wm)(a)])])]),f],64)}}}}]);